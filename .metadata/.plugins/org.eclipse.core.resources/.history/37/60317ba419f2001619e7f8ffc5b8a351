/*
 * Huffman.cpp
 *
 *  Created on: Feb 11, 2017
 *      Author: zeqingzhang
 */
#include "Huffman.h"
#include <algorithm>
#include <functional>
using namespace std;
using namespace hw05;

void Huffman::addTree(const BinaryTree& tree) noexcept{
		trees_.push_back(tree);
}




BinaryTree Huffman::applyHuffman(){
	if(trees_.size() == 0){
		throw domain_error("The size of the tree array is 0!");
	}

	if(trees_.size() == 1){
		return trees_.at(0);
	}

	for(BinaryTree tree : trees_){
		int WeightSum = 0;
		tree.traverse([&Weight](const string& text, double weight){
			WeightSum += weight;
		});
		tree.weight_ = WeightSum;
	}

	sort(trees_.begin(), trees_.end(), [](BinaryTree& b1, BinaryTree& b2){
				return b1.weight_ > b2.weight_;
			});
	BinaryTree left = trees_.at(trees_.size() - 2);
	BinaryTree right = trees_.at(trees_.size() - 1);
	trees_.pop_back();
	trees_.pop_back();

	BinaryTree newTree = BinaryTree(left, right);
	trees_.push_back(newTree);
	return applyHuffman();
}
